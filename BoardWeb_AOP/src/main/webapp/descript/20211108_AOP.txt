Spring AOP를 사용하기 위한 사전 준비
1. pom.xml

2. Spring 설정 파일 (applicationContext.xml)

AOP 설정 순서
3. applicationContext.xml 내에 각 비즈니스 메서드에서 사용할 로깅 메서드를 가진 클래스를 빈 객체로 선언

	<bean id="log" class="com.encore.biz.common.LogAdvice"></bean>

4.  
	<aop:config> // aop 설정 태그
		<aop:pointcut expression="execution(* com.encore.biz..*Impl.*(..))" id="allPointcut"/>
									어느 패키지에 있는 비즈니즈 로깅 메서드가 실행될 때 
		
		<aop:aspect ref="log">
			<aop:before 					method="printLog" pointcut-ref="allPointcut"></aop:before>
			비즈니스 로직 메서드 내의 비즈니스 로직 실행 전, aop:pointcut에 지정된 메서드를 호출하여 로깅 출력
		</aop:aspect>
	</aop:config>

Spring AOP:
클라이언트가 핵심 관점(OOP)에 해당하는 비즈니스 메서드(@Service 내의 메서드에서 호출되는 @Repository 관련 메서드)를 호출할 때
횡단 관심(AOP)에 해당하는 메서드를 적절(before)하게 실행해준다

핵심관점과 횡단 관점 사이에 소스 코드 상의 결합(DI)가 발생하지 않는다.

====================================================================================

AOP 관련 용어 요약

1. JoinPoint:
	클라이언트가 호출하는 비즈니스 메서드
	
2. PointCut
	필터링된 JoinPoint
	
	 expression="execution(* com.encore.biz..*Impl.*(..))"
	 * : 리턴 타입 (모든)
	 com.encore.biz.. : 패키지 경로
	 *Impl : 클래스명 (~~~Impl)
	 . : ~ 안(~ 내의)
	 *(..) : 메서드명 (매개변수에 대한 getter) : 모든 메서드
	 		 (에, get*(..))

3. Advice :
	횡단 관심에 해당하는 공통 기능의 코드
	=> 독립적인 메서드로 작성
	구현된 메서드가 언제 동작할지는 스프링 설정 파일에 명시
	동작 시점 : before / after / after-returnning / after-throwing / around
		before : 비즈니스 로직 실행 전
		after : 비즈니스 로직 실행 후
		after-returnning : 비즈니스 로직 실행 후, 값이 return 될 때
		after-throwing : 비즈니스 로직 실행 중 예외처리가 발생할 
		around : before + after

4. Weaving :
	PointCut으로 지정한 핵심 관심 메서드가 호출될 때,
	Advice에 해당하는 횡단 관심 메서드가 삽입되는 과정
	
	Weaving 처리 방식
		Complietime
		Loadingtime
		Runtime

5. Aspect / Advisor
	Aspect : Pointcut + Advice
	Advisor : Transaction 기능 처리할 때만 Aspect 대신 Advisor 사용
	
	*** Transaction ***
	Transaction : 데이터베이스(rollback / commit)
	극단적인 예 :
		작업내용 : 인터넷을 통해야 웹 문서내용을 크롤링하고,  <= OK
				각 웹 문서의 대표적인 단어들을  		 <= 문제 발생
				오라클 데이터베이스에 저장			 <= 저장 X
		

















