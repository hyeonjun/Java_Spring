Spring 적용
=> web.xml 문서에 스프링이 제공하는 DispatcherServlet 클래스(유일한 서블릿)를 등록
=> DispatcherServlet에 관련된 설정 : xml 문서를 통해 설정
	-> xml 문서의 파일명: web.xml 문서에 등록한 DispatcherServlet의 서블릿 이름을 이용하여 작성
					 예) <servlet-name>test</servlet-name>
					    WEB-INF 폴더 내에 test-servlet.xml 가 존재해야 한다.
	-> xml 문서의 파일명과 경로를 별도로 지정할 경우
	   web.xml 문서에 DispatcherServlet 를 등록할 때 <init-param> 를 이용하여 서블릿 설정파일에 대한 경로와 파일명을 등록
	       예) WEB-INF 내에 configuration 폴더 내에 test-layer.xml 문서를 생성하였을 경우
	       <init-param>
	       	<param-name>contextConfigLocaion</param-name>   <!-- 변경불가(DispatcherServlet의 내부 변수명)
	       	<param-value>/WEB-INF/configuration/test-layer.xml</param-value>
	       </init-param>

1. xml 문서 이용 (HadlerMapping / Controller / ViewResolver 등록)
	<!-- Handler : 스프링 제공 -->
	<bean class="~~~~.SimpleUrlHandlerMapping">
		<property name="mappings"> <!-- 변경불가 : SimpleUrlHandlerMapping의 내부 변수 -->
			<props>
				<prop key="웹 주소줄을 통한 요청URL">아래 컨트롤더에 대한 id</prop>
				<prop key="웹 주소줄을 통한 요청URL">아래 컨트롤더에 대한 id</prop>
				<prop key="웹 주소줄을 통한 요청URL">아래 컨트롤더에 대한 id</prop>
			</props>
		</property>
	</bean>

	<!-- Controller 들 등록 : 스프링이 제공하는 Controller 인터페이스를 구현받은 클래스들 -->
	<bean id="아이디" class="스프링이 제공하는 Controller 인터페이스를 구현받은 클래스의 풀네임"></bean> <!-- id값 중복 불가 -->
	<bean id="아이디" class="스프링이 제공하는 Controller 인터페이스를 구현받은 클래스의 풀네임"></bean>
	<bean id="아이디" class="스프링이 제공하는 Controller 인터페이스를 구현받은 클래스의 풀네임"></bean>
	
	<!- ViewResolver 등록 : 스프링 제공 -->
	<bean id="viewResolver" class="~~~.InternalResourceViewResolver">
		<property name="prefix">화면구현 파일의 경로</property> <!-- name 값 변경 불가 - InternalResourceViewResolver의 내부 변수 -->
		<property name="suffix">화면구현 파일의 확장자</property>	
	</bean>
	
	<!-- 화면 구현 파일의 경로 : 기준 경로 webapp('/') -->
	<!-- 화면 구현 파일의 확장자 : .jsp -->
	
	만약 최초 호출되는 index.jsp 와 내부 처리에 호출되는 ~~.jsp 파일이 WEB-INF/test 라는 폴더에 존재할 경우
	최초 호출되는 index.jsp : 반드시 webapp 폴더에 존재.
	내부 처리에 호출되는 ~~.jsp : WEB-INF/test 라는 폴더에 존재할 경우 -> 화면 구현 팡리의 경로는 "/WEB-INF/test" 와 같이 설정해야한다.
	
	스프링이 제공하는 Controller 인터페이스를 구현받은 클래스들 작성 방법
	public class TestController implements Controller {
		
		@Override
		public ModelAndView handleRequest(HttpServletRequest request, HttpServletResponse response) {
			// 사용자 입력 냉요은 첫 번째 매개 변수(request)를 통하여 자동 전달..
			// 따라서 request.getParameter("파라미터명")을 이용하여 추출 가능
			    => "파라미터명"은 <input> 태그의 name="" 값 or <a href=""> 로 전달되는 ?id=test&password=qwer1234 와 같은 id, password.
			   
			        반드시 ModelAndView 객체를 리턴해야한다.
			    ModelAndView 객체 설정 방법
			    1. 결과 테이버를 화면과 함께 반환
			    	ModelAndVeiw mv = new ModelAndView();
			    	mv.addObject("화면에서 사용할 이름", 결과 데이터);
			    	mv.setViewName("결과데이터를 출력할 화면 파일명");
			    	return mv;
			    2. 단순히 화면만 반환
			    	ModelAndVeiw mv = new ModelAndView();
			    	mv.setViewName("출력할 화면 파일명");
			    	return mv;
		}
	
	}
	
	
2. Annotation 이용
	서블릿 설정 xml 문서 내에 @Controller 가 붙은 클래스들을 스캔하여 자동으로 객체 생성을 위한 context가 추가되어야한다.
	
	<context:component-scan base-package=""></context:component-scan> 를 추가
	
	base-package : @Controller 가 붙은 클래스들만 스캔할 수 있도록 기본 패키지를 설정
	
	예) @Controller 클래스들이 com.test.controller 에 존재할 경우
		<context:component-scan base-package="com.test.controller"></context:component-scan>
	
	예) @Controller 클래스들이 com.test.controller.member
						   com.test.controller.admin
						   com.test.controller.shop  에 존재할 경우
		공통 기본 패키지를 설정하면 그 하위까지 스캔함
		<context:component-scan base-package="com.test.controller"></context:component-scan>


	@Controller 클래스 작성방법
	1. 클래스 선언부 위에 @Controller 추가
	2. 요청 사항을 처리할 수 있는 메서드 위에 @RequestMapping(value="/요청사항") 추가
	
	@RequestMapping(value="/요청사항")는 동일한 요청 사항이 전달되었을 때
	부가적으로 전송방식에 따라 메서드를 구분할 수 있다.
	@RequestMapping(value="/요청사항", method="전송방식")
	method="전송방식" : RequestMethod.GET 또는 RequestMethod.POST
	
	@Controller 방식을 사용할 때 주의사항
	1. 입력 파라미터명과 VO 객체 내부 변수 명을 동일해야한다.
	2. 요청사항 처리 메서드는 DispatcherServlet 객체가 Command 형태의 객체를 알아서 생성하여 처리 메서드에게 전달해주기 때문에
	   별도의 객체 생성 코드가 필요없다. 처리 메서드의 매개 변수를 어떻게 작성해야 하는지는 해당 멧드가 어떤 일을 하느냐에 따라 작성이 가능하다.
	
	단순 화면 파일만 응답 처리할 경우
	@RequestMapping(value="/요청사항")
	public String 메서드명(VO객체타입 변수){
	
		return "화면 파일.jsp"
	}
	
	입력받은 내용을 처리한 후, 화면 파일을 응답을 처리할 경우
	@RequestMapping(value="/요청사항")
	public String 메서드명(VO객체타입 변수, DAO객체타입 변수){
	
		return "화면 파일.jsp"
	}
	
	입력받은 내용을 처리한 후, 화면 파일에 결과 데이터를 같이 응답 처리할 경우
	@RequestMapping(value="/요청사항")
	public String 메서드명(VO객체타입 변수, DAO객체타입 변수, ModelAndView m){
		
		m.addObject("화면에서 사용할 이름", 결과 데이터);
		m.setViewName("결과데이터를 출력할 화면 파일명");
		return m;
	}

===============================================================================
JSP 내에서의 전달된 데이터 추출 방법
단순 데이터 출력 : ${데이터이름.변수}

반복문 : JSTL 이용
<c:forEach items="${리스트변수(다중데이터)}" var="추출된 객체 저장 변수">

</c:forEach>

items="${리스트변수(다중데이터)}" :m.addObject("화면에서 사용할 이름", 결과 데이터)

예)
@RequestMapping(value="/test.do")
public String 메서드명(TestVO vo, TestDAO dao){
	
	return "get.jsp"
}

JSP
${TestVO.n}
-------------------------------------------------

예)
@RequestMapping(value="/test.do")
public String 메서드명(@ModelAttribute("test") TestVO vo, TestDAO dao){
	return "get.jsp";
}

JSP
${test.n}
-------------------------------------------------

예)
@RequestMapping(value="/test.do")
public String 메서드명(TestVO vo, TestDAO dao, ModelAndView m){
	m.addObject("list", dao.getList());
	m.setViewName("getList.jsp");
	return m;
}

JSP
<c:forEach items="${list}" var="test">
	${test.n}
	.
	.
	.
</c:forEach>

===============================================================================
기타 Annotation

1. @RequestParam : VO 클래스에 없는 변수 (즉, 파라미터명에 해당하는 변수 선언이 되어 있지 않을 경우)

 public class BoardVO {
	
	private int seq;
	private String title;
	private String writer;
	private String content;
	private Date regDate;
	private int cnt;
	
	~~~
}

getBoardList.jsp
<form action="getBoardList.do" method="post">
		<select name="searchCondition">
			<option value="TITLE">제목</option>
			<option value="CONTENT">내용</option>
		</select>
		<input type="text" name="searchKeyword" />
		<input type="submit" value="검색어를 입력하세요."/>
</form>

getBoardList.do에 전달되는 파라미터 : searchCondition / searchKeyword
 
@RequestParam는 위와 같이 전달되는 파라미터명에 해당하는 변수가 VO객체에 존재하지 않을 경우에 처리하기 위해 사용

@RequestParam(value="searchCondition",			 // 화면으로부터 전달되는 파라미터명
			  defaultValue="TITLE",				 // 기본값
			  required="false"					 // 파라미터 생략여부(boolean)
			  )

===============================================================================

@ModelAttribute : View(jsp) 에서 사용할 객체명을 설정
1. 매개변수 타입 앞에
   public String loginView(@ModelAttribute("user") UserVO vo){
   		
   }

2. 메서드 위에 사용 <- RequestMapping 보다 @ModelAttribute가 우선순위(먼저 호출된다)
   @ModelAttribute("cond")
   public Map<String, String> searchConditionMap(){
   		
   }
	
   @RequestMapping(value="/test.do")
   public String 메서드명(TestVO vo, TestDAO dao, ModelAndView m){

   } 

===============================================================================

@SessionAttributes : 주로 수정작업 시 전체가 아닌 일부만 수정할 수 있음
 => 전체를 수정하지 않고 일부만 수정할 경우 null 값을 방지하는 기능을 목적으로 사용한다.
 
 @SessionAttributes
 컨트롤러 클래스 선언부 위에 설정
 
 @Controller
 @SessionAttributs("board") 		// 실행중인 애플리케이션 내에 "board"라는 이름의 Model 객체가 존재하면 그 객체를 자동으로 세선에 저장
 public class BoardController {
   ~~~~
   ~~~~
 }
 
 @RequestMapping(value="/getBoard.do")
 public ModelAndView getBoard(BoardVO vo, BoardDAOSpring dao, ModelAndView mav) {
	System.out.println("===> 글 상세보기 처리");
	
	mav.addObject("board", dao.getBoard(vo));   	// 이 때 model 객체를 세션에 자동으로 저장
	mav.setViewName("getBoard.jsp");
	return mav;
 }
